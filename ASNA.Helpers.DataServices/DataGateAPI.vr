Using System
Using System.Text
Using System.Data
Using System.Collections.Specialized
Using System.Text.RegularExpressions
Using System.Collections.Generic
Using ASNA.DataGate.Client
Using ASNA.DataGate.Common
Using ASNA.DataGate.Providers

DclNamespace ASNA.Helpers.DataServices

BegEnum  QueryType Access(*Public) 
    DclEnumFld Paged
    DclEnumFld Simple         
EndEnum 

BegClass DataGateAPI Access(*Public)

    BegFunc Base64Encode Type(*String) Access(*Public) Shared(*Yes)
        DclSrParm PlainText Type(*String) 

        DclArray plainTextBytes Type(*Byte) Rank(1)

        plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText)
        LeaveSr System.Convert.ToBase64String(plainTextBytes)
    EndFunc 

    BegFunc Base64Decode Type(*String) Access(*Public)  Shared(*Yes)
        DclSrParm base64EncodedData Type(*String) 

        DclArray base64EncodedBytes Type(*Byte) Rank(1)

        base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData)
        LeaveSr System.Text.Encoding.UTF8.GetString(base64EncodedBytes)
    EndFunc 

    BegFunc ParseCommaDelimitedStringIntoArray Type(*String) Rank(1) Access(*Public) Shared(*Yes)
        DclSrParm FieldsString Type(*String) 

        DclArray Result Type(*String) Rank(1)

        Result = Regex.Split(FieldsString.Trim(), "\s*,\s*") 

        LeaveSr Result 
    EndFunc 

    BegFunc OpenDGFileForRead Type(FileAdapter) Access(*Public) Shared(*Yes)
        DclSrParm DB        Type(AdgConnection)
        DclSrParm Library   Type(*String)
        DclSrParm File      Type(*String) 

        DclFld DGFile Type(FileAdapter)
        
        DGFile = *New FileAdapter(DB,String.Format("{0}/{1}",Library.Trim(),File.Trim()))
        DGFile.OpenAttributes.BlockingFactor = FileOpenAttr.OptimalBlockingFactor
        DGFile.AccessMode = AccessMode.Read
        
        LeaveSr DGFile
    EndFunc   

    BegFunc ReadNextRecord Type(*Boolean) Access(*Public) Shared(*Yes)
        DclSrParm DGFile Type(FileAdapter) 
        DclSrParm DGDS   Type(AdgDataSet)

        Try
            DGFile.ReadSequential(DGDS, ReadSequentialMode.Next, LockRequest.Read)
            LeaveSr *False 
        Catch DgEx Type(dgException) 
            If (DgEx.Error = dgErrorNumber.dgEaEOF)
                LeaveSr *True 
            Else
                Throw DgEx           
            EndIf
        EndTry    
    EndFunc     

    BegSr PopulateDGKeysAndUsage Access(*Public) Shared(*Yes)
        DclSrParm Keys       Type(*String) Rank(1) By(*Reference)
        DclSrParm Usage      Type(ASNA.DataGate.Common.KeyUsages) Rank(1) By(*Reference) 
        DclSrParm QueryArgs  Type(ASNA.Helpers.DataServices.QueryFileInstanceArgs) 

        //DclFld qf Type(List(*Of QueryField))
        DclFld i  Type(*Integer4) 

        // Generally DG Keys and Usage should be populated from the QueryArgs.Inputs.OrderBy collection.
        // If an OrderBy isn't specified, the default order by is determined by the QueryArgs.Inputs.QueryParms 
        // collection.

        If (QueryArgs.Inputs.OrderBy.Count = 0)             
            Keys = *New String[QueryArgs.Inputs.QueryParms.Count] 
            Usage = *New KeyUsages[QueryArgs.Inputs.QueryParms.Count ] 
            Do FromVal(0) ToVal(QueryArgs.Inputs.QueryParms.Count - 1) Index(i)
                keys[i] = QueryArgs.Inputs.QueryParms[i].FieldName
                Usage[i] = KeyUsages.ASCEND
            EndDo     
        Else
            Keys = *New String[QueryArgs.Inputs.OrderBy.Count] 
            Usage = *New KeyUsages[QueryArgs.Inputs.OrderBy.Count ] 
            Do FromVal(0) ToVal(QueryArgs.Inputs.OrderBy.Count - 1) Index(i)
                keys[i] = QueryArgs.Inputs.OrderBy[i].FieldName
                Usage[i] = QueryArgs.Inputs.OrderBy[i].SortOrder
            EndDo     
        EndIf 
    EndSr

    BegFunc SetCorrectAndOrInQuery  Type(*String) Access(*Public) Shared(*Yes)
        DclSrParm Query              Type(*String)
        DclSrParm PlatformIdentifier Type(*String)

        DclFld Result Type(*String)

        //Result = Query.ToUpper()
        Result = Query

        If (PlatformIdentifier.Trim().ToUpper() = "DB2" OR PlatformIdentifier.Trim().ToUpper() = "IBM I")  
            // Non-IBM i platforms don't want the asterisk with the AND/OR operations.
            // This code assumes the database name label property isn't "DB2" for non-IBM i databases.
            Result = Regex.Replace(Query,"\s/*AND\s*", " *AND ",RegexOptions.IgnoreCase)
            Result = Regex.Replace(Result,"\s/*OR\s*", " *OR ",RegexOptions.IgnoreCase)
            Result = Regex.Replace(Result,"\s/*CT\s*", " *CT ",RegexOptions.IgnoreCase)
//            Result = Query.Replace(" AND "," *AND ") 
 //           Result = Result.Replace(" OR "," *OR ") 
        EndIf 

        LeaveSr Result
    EndFunc  

    BegFunc EscapeQueryFieldValue Type(*String) Access(*Public) Shared(*Yes)
        DclSrParm FieldValue Type(*String)
        // OpenQueryFile chokes with embedded single apostrophes. This function
        // swaps any single occurrence of an apostrophe for two apostrophes to solve
        // that problem. Note that this is only changing the argument used OpenQueryFile--
        // the underlying data is kept intact.

        DclFld SINGLE_APOSTROPHE Type( *String ) Inz( "'" )
        DclFld DOUBLE_APOSTROPHE Type( *String ) Inz( "''" )
        
        LeaveSr FieldValue.Replace(SINGLE_APOSTROPHE, DOUBLE_APOSTROPHE)         
    EndFunc

    BegFunc GetKeyTable Type(AdgKeyTable) Access(*Public) Shared(*Yes)
        DclSrParm DGFile Type(FileAdapter) 
        DclSrParm DGDS   Type(AdgDataSet)

        DclFld FormatName Type(*String) 
        DclFld Result Type(AdgKeyTable) 
        
        FormatName = DGFile.GetFormatName(0)      
        Result = DGDS.NewKeyTable(FormatName) 
        
        LeaveSr Result         
    EndFunc 
    
    BegSr DeleteColumnsFromDataTable Access(*Public) Shared(*Yes)
        DclSrParm dt      Type(DataTable ) 
        DclSrParm Args    Type(ASNA.Helpers.DataServices.QueryFileInstanceArgs) 

        DclFld  ColumnsToRemove Type(StringCollection) New()

        ForEach Col Type( DataColumn ) Collection( dt.Columns )
            If ( System.Array.IndexOf(Args.Inputs.Fields, Col.ColumnName.ToLower()) = -1 )
                ColumnsToRemove.Add(Col.ColumnName.ToLower()) 
            EndIf
        EndFor

        ForEach Field Type(*String) Collection(ColumnsToRemove) 
            dt.Columns.Remove(Field)                 
        Endfor
    EndSr

    BegFunc GetFieldNameTokens Type(*String) Rank(1) Access(*Public) Shared(*Yes)
        DclSrParm FieldName Type(*String) 

        DclArray tokens    Type(*String) Rank(1) 

        DclArray tokens Type(*String) Rank(1) 

        If (FieldName.Contains(":")) 
            tokens = Regex.Split(FieldName.Trim(), "\s*:\s*")             
        Else
            tokens = *New *String[2]
            tokens[0] = FieldName
            tokens[1] = FieldName
        EndIf

        LeaveSr tokens
    EndFunc



EndClass
