Using System
Using System.Collections
Using System.Collections.Specialized
Using System.Collections.Generic
Using System.Text
Using System.Text.RegularExpressions
Using System.Data 
Using System.Diagnostics
Using System.IO 
using ASNA.DataGate.Client
using ASNA.DataGate.Common
Using ASNA.DataGate.DataLink
Using ASNA.DataGate.Providers
Using System.ComponentModel
Using System.Diagnostics
Using NewtonSoft.Json

DclNameSpace ASNA.Helpers.DataServices

BegClass QueryFile Access(*Public) 
    DclFld DGDB           Type(AdgConnection) 
    DclFld DGFile         Type(FileAdapter)     
    DclFld DGDS           Type(AdgDataSet)
    DclFld OutputAdapter  Type(iQueryFileAdapter) 
    DclFld Args           Type(QueryFileInstanceArgs) 
  
    BegConstructor Access(*Public) This(DGDB,Args,*Nothing)
        DclSrParm DGDB   Type(AdgConnection)
        DclSrParm Args   Type(QueryFileInstanceArgs) 

    EndConstructor 

    BegConstructor Access(*Public) 
        DclSrParm DGDB          Type(AdgConnection)
        DclSrParm Args          Type(QueryFileInstanceArgs) 
        DclSrParm OutputAdapter Type(iQueryFileAdapter)

        *This.DGDB = DGDB
        *This.Args = Args
        //*This.Args.Initialize()

        If ( OutputAdapter = *Nothing)            
            *This.OutputAdapter = *New ToDataTableAdapter()
        Else
            *This.OutputAdapter = OutputAdapter
        End
    EndConstructor 
      
    BegFunc GetQueryRows Access(*Public) Type(DataTable) 
        DclSrParm RecordsToRead Type(*Integer4) 
       
        *This.DGFile = DataGateAPI.OpenDGFileForRead(*This.DGDB,*This.Args.Inputs.Library,*This.Args.Inputs.File)

        If (*This.Args.Inputs.QueryType = ASNA.Helpers.DataServices.QueryType.Simple) 
            ReadRowsWithSimpleQuery(RecordsToRead) 
        Else
            ReadRowsWithPagedQuery(RecordsToRead)
        EndIf 

        DGFile.Close()

        LeaveSr DGDS.Tables[0]
    EndFunc 

    BegSr ReadRowsWithPagedQuery
        DclSrParm RecordsToRead Type(*Integer4) 

        DclFld EOF           Type(*Boolean)
        DclFld Key           Type(AdgKeyTable)

        *This.DGDS = *Nothing
        *This.DGFile.OpenNewAdgDataSet(*ByRef DGDS)

        Key = DGDS.NewKeyTable(0)
        ForEach fk Type(QueryField) Collection(*This.Args.Inputs.QueryFields) 
            Key.Row[fk.FieldName] = fk.FieldValue 
        EndFor 

        DGFile.SeekKey(SeekMode.Last, Key) 
        EOF = DataGateAPI.ReadNextRecord(DGFile,DGDS)

        Try 
            DGFile.SeekKey(SeekMode.SetGT, Key) 
        Catch ex Type(DGException) 
            DclFLd x Type(*String) 
            x = ex.Message
        EndTry 

        OutputAdapter.Header(DGDS.Tables[0])
        Do FromVal(1) ToVal(RecordsToRead) 
            EOF = DataGateAPI.ReadNextRecord(DGFile,DGDS)
            If (EOF) 
                Leave
            EndIf
            OutputAdapter.Row(DGDS.Tables[0])
        EndDo 
        OutputAdapter.Footer(DGDS.Tables[0])
    EndSr

    BegSr ReadRowsWithSimpleQuery
        DclSrParm RecordsToRead Type(*Integer4) 

        DclFld EOF           Type(*Boolean)
        DclFld QueryMask     Type(StringBuilder) New()
        DclFld Query         Type(*String) 
        DclFld Counter       Type(*Integer4)
        
        DclArray Keys        Type(*String) Rank(1)
        DclArray Usage       Type(ASNA.DataGate.Common.KeyUsages) Rank(1)

        QueryMask.Append(CheckQueryArgs(*This.Args.Inputs.Query.ToUpper())) 
        CreateQueryDefinition(QueryMask)                 
        DataGateAPI.PopulateDGKeysAndUsage(*ByRef Keys,*ByRef Usage,*This.Args.Inputs.QueryFields)
        
        Query = QueryMask.ToString() 
        Query = DataGateAPI.SetCorrectAndOrInQuery(Query,DGDB.SourceProfile.Label)

        EOF = *False    
        Counter = 0 
        DGFile.OpenSimpleQuery(*ByRef DGDS,"*UNIQUE",Query,Keys,Usage)

        OutputAdapter.Header(DGDS.Tables[0])
        DoWhile NOT DataGateAPI.ReadNextRecord(DGFile,DGDS)
            Counter += 1 
            If (Counter = RecordsToRead)
                Leave
            EndIf
            OutputAdapter.Row(DGDS.Tables[0])
        EndDo 
        OutputAdapter.Footer(DGDS.Tables[0])
    EndSr

    BegFunc CheckQueryArgs Type(*String) 
        DclSrParm Query Type(*String) 

        DclFld Result Type(*String) 

        // Ensure that replacement query args are in the format
        // {arg} with not spaces inside the braces.
        DclConst OPENING_BRACE_WITH_TRAILING_SPACE Value('{\s*') 
        DclConst CLOSING_BRACE_WITH_TRAILING_SPACE Value('\s*}') 
        DclConst OPENING_BRACE                     Value('{')
        DclConst CLOSING_BRACE                     Value('}')

        Result = Regex.Replace(Query,OPENING_BRACE_WITH_TRAILING_SPACE, OPENING_BRACE)
        Result = Regex.Replace(Result,CLOSING_BRACE_WITH_TRAILING_SPACE, CLOSING_BRACE)

        LeaveSr Result 
    EndFunc 

    BegSr CreateQueryDefinition
        DclSrParm QueryMask Type(StringBuilder) 

        DclFld KeyField  Type(*String)
        DclFld KeyValue  Type(*String)
        DclFld i         Type(*Integer4)
        
        // Create query for OpenQueryFile.    
        Do FromVal(0) ToVal(*This.Args.Inputs.QueryFields.Count - 1) Index(i)
            KeyValue = String.Format("{0}", DataGateAPI.EscapeQueryFieldValue(*This.Args.Inputs.QueryFields[i].FieldValue.ToString())) 
            KeyField = String.Format("{{{0}}}",*This.Args.Inputs.QueryFields[i].FieldName.ToUpper())
            QueryMask.Replace(KeyField,KeyValue) 
        EndDo
    EndSr

    BegSr SetdBeginningAndEndKeys
        DclSrParm dt Type(DataTable) 

        DclFld dr  Type(DataRow)         

        If (dt.Rows.Count > 0) 
            dr = dt.Rows[0]         
            ForEach key Type(QueryField) Collection(*This.Args.Inputs.QueryFields)
                *This.Args.Outputs.StartingKeys.Add(*New QueryField(key.FieldName, dr[key.FieldName].ToString().Trim())) 
            EndFor
            dr = dt.Rows[dt.Rows.Count-1] 
            ForEach key Type(QueryField) Collection(*This.Args.Inputs.QueryFields)
                *This.Args.Outputs.EndingKeys.Add(*New QueryField(key.FieldName, dr[key.FieldName].ToString().Trim())) 
            EndFor
        EndIf 
    EndSr

    BegFunc GetList Type(*Object) Access(*Public)
        DclFld timer                Type(StopWatch) New()

        Try
            timer.Start()
            *This.GetQueryRows(*This.Args.Inputs.Rows) 
            DataGateAPI.DeleteColumnsFromDataTable(DGDS.Tables[0],*This.Args)
            SetdBeginningAndEndKeys(DGDS.Tables[0])
            timer.Stop()
            *This.Args.Outputs.ResultRowCount  = DGDS.Tables[0].Rows.Count 
            *This.Args.Outputs.ResultColCount  = DGDS.Tables[0].Columns.Count
            *This.Args.Outputs.Milliseconds    = timer.ElapsedMilliseconds
            OutputAdapter.Render(DGDS.Tables[0])

        Catch DGExcept Type(dgException)
            *This.Args.Error.ErrorMessage = DGExcept.Message
            *This.Args.Error.ErrorNumber  = DGExcept.Error.ToString()
            *This.Args.Error.SystemError  = DGExcept.SystemError.ToString() 
            *This.Args.Error.StackTrace   = DGExcept.StackTrace
            *This.Args.Error.ErrorException = Except

        Catch Except Type(System.Exception) 
            *This.Args.Error.ErrorMessage = DGExcept.Message
            *This.Args.Error.ErrorNumber  = "No error number"
            *This.Args.Error.SystemError  = "No system error"
            *This.Args.Error.ErrorException = Except
        EndTry 

        LeaveSr OutputAdapter.Result()
    EndFunc 

EndClass

