Using System
Using System.Collections
Using System.Collections.Specialized
Using System.Collections.Generic
Using System.Text
Using System.Text.RegularExpressions
Using System.Data 
Using System.Diagnostics
Using System.IO 
using ASNA.DataGate.Client
using ASNA.DataGate.Common
Using ASNA.DataGate.DataLink
Using ASNA.DataGate.Providers
Using System.ComponentModel
Using System.Diagnostics
Using NewtonSoft.Json

DclNameSpace ASNA.Helpers.DataServices

BegClass QueryFile Access(*Public) 
    DclFld DGDB           Type(AdgConnection) 
    DclFld DGFile         Type(FileAdapter)     
    DclFld DGDS           Type(AdgDataSet)
    DclFld OutputAdapter  Type(iQueryFileAdapter) 
    DclFld Args           Type(QueryFileInstanceArgs) 
  
    BegConstructor Access(*Public) This(DGDB,Args,*Nothing)
        DclSrParm DGDB   Type(AdgConnection)
        DclSrParm Args   Type(QueryFileInstanceArgs) 

    EndConstructor 

    BegConstructor Access(*Public) 
        DclSrParm DGDB          Type(AdgConnection)
        DclSrParm Args          Type(QueryFileInstanceArgs) 
        DclSrParm OutputAdapter Type(iQueryFileAdapter)

        *This.DGDB = DGDB
        *This.Args = Args

        If ( OutputAdapter = *Nothing)            
            *This.OutputAdapter = *New ToDataTableAdapter()
        Else
            *This.OutputAdapter = OutputAdapter
        End
    EndConstructor 
      
    BegFunc GetQueryRows Access(*Public) Type(DataTable) 
        DclSrParm RecordsToRead Type(*Integer4) 

        *This.Args.Outputs.ResultRowCount = 0 

        If (RecordsToRead = -1) 
            RecordsToRead = 1000000
        EndIf
       
        *This.DGFile = DataGateAPI.OpenDGFileForRead(*This.DGDB,*This.Args.Inputs.Library,*This.Args.Inputs.File)

        If (*This.Args.Inputs.QueryType = ASNA.Helpers.DataServices.QueryType.Simple) 
            ReadRowsWithSimpleQuery(RecordsToRead) 
        Else
            ReadRowsWithPagedQuery(RecordsToRead)
            SetBeginningAndEndKeys(DGDS.Tables[0])
        EndIf 

//        SetBeginningAndEndKeys(DGDS.Tables[0])

        DGFile.Close()

        LeaveSr DGDS.Tables[0]
    EndFunc 

    BegSr CheckFieldsListAgainstRecord 
        DclSrParm dt Type(DataTable) 

        DclFld FieldFound Type(*Boolean) 

        ForEach f Type(*String) Collection(*This.Args.Inputs.Fields) 
            FieldFound = *False 
            ForEach column Type(DataColumn) Collection(dt.Columns)
                If (column.ColumnName.ToUpper() = f.ToUpper())
                    FieldFound = *True 
                    Iterate 
                EndIf
            EndFor 
            If (NOT FieldFound)
                Throw *New System.ArgumentException(String.Format("Field '{0}' is not in the {1} file.", f, *This.Args.Inputs.File))
            EndIf 
        EndFor
    EndSr

    BegSr CheckForFetchingAllColumns
        DclSrParm dt Type(DataTable) 

        DclFld sb         Type(StringBuilder) New(1024)
        DclFld FieldList  Type(*String) 

        If (args.Inputs.FieldsList.ToUpper().Trim() = "*ALL")
            ForEach column Type(DataColumn) Collection(dt.Columns)
                sb.Append(column.ColumnName + ",")
            EndFor 

            FieldList = sb.ToString()
            FieldList = FieldList.SubString(0,FieldList.Length - 1) 
            *This.Args.Inputs.FieldsList = FieldList 
        EndIf 
    EndSr

    BegSr ReadRowsWithPagedQuery
        DclSrParm RecordsToRead Type(*Integer4) 

        DclFld EOF           Type(*Boolean)
        DclFld Key           Type(AdgKeyTable)

        *This.DGDS = *Nothing
        *This.DGFile.OpenNewAdgDataSet(*ByRef DGDS)
        CheckForFetchingAllColumns(DGDS.Tables[0])
        CheckFieldsListAgainstRecord(DGDS.Tables[0])
        DataGateAPI.DeleteColumnsFromDataTable(DGDS.Tables[0],*This.Args)
        *This.Args.Outputs.ResultColCount = *This.Args.Inputs.Fields.Length

        Key = DGDS.NewKeyTable(0)
        ForEach fk Type(QueryField) Collection(*This.Args.Inputs.QueryParms) 
            Key.Row[fk.FieldName] = fk.FieldValue 
        EndFor 

//        DGFile.SeekKey(SeekMode.Last, Key) 
//        EOF = DataGateAPI.ReadNextRecord(DGFile,DGDS)
//        If (EOF) 
//            Throw *New System.ArgumentException("EOF: no records available for page query") 
//        EndIf

        DGFile.SeekKey(SeekMode.SetGT, Key) 

        OutputAdapter.Header(DGDS.Tables[0])
        Do FromVal(1) ToVal(RecordsToRead) 
            EOF = DataGateAPI.ReadNextRecord(DGFile,DGDS)

            If (EOF) 
                Leave
            EndIf
            OutputAdapter.Row(DGDS.Tables[0])
            *This.Args.Outputs.ResultRowCount += 1
        EndDo 
        OutputAdapter.Footer(DGDS.Tables[0])
    EndSr

    BegSr ReadRowsWithSimpleQuery
        DclSrParm RecordsToRead Type(*Integer4) 

        DclFld EOF           Type(*Boolean)
        DclFld QueryMask     Type(StringBuilder) New()
        DclFld Query         Type(*String) 
        DclFld Counter       Type(*Integer4)
        
        DclArray Keys        Type(*String) Rank(1)
        DclArray Usage       Type(ASNA.DataGate.Common.KeyUsages) Rank(1)

        QueryMask.Append(CheckQueryArgs(*This.Args.Inputs.Query)) 
        CreateQueryDefinition(QueryMask)                 
        DataGateAPI.PopulateDGKeysAndUsage(*ByRef Keys,*ByRef Usage,*This.Args)
        
        Query = QueryMask.ToString() 
        Query = DataGateAPI.SetCorrectAndOrInQuery(Query,DGDB.SourceProfile.Label)

        EOF = *False    
        Counter = 0 
        DGFile.OpenSimpleQuery(*ByRef DGDS,"*UNIQUE",Query,Keys,Usage)
        CheckForFetchingAllColumns(DGDS.Tables[0])
        CheckFieldsListAgainstRecord(DGDS.Tables[0])
        DataGateAPI.DeleteColumnsFromDataTable(DGDS.Tables[0],*This.Args)
        *This.Args.Outputs.ResultColCount = *This.Args.Inputs.Fields.Length

        OutputAdapter.Header(DGDS.Tables[0])
        DoWhile NOT DataGateAPI.ReadNextRecord(DGFile,DGDS)
            OutputAdapter.Row(DGDS.Tables[0])
            *This.Args.Outputs.ResultRowCount += 1
            Counter += 1 
            If (Counter = RecordsToRead)
                Leave
            EndIf
        EndDo 
        OutputAdapter.Footer(DGDS.Tables[0])
    EndSr

    BegFunc CheckQueryArgs Type(*String) 
        DclSrParm Query Type(*String) 

        DclFld Result Type(*String) 

        // Ensure that replacement query args are in the format
        // {arg} with not spaces inside the braces.
        DclConst OPENING_BRACE_WITH_TRAILING_SPACE Value('{\s*') 
        DclConst CLOSING_BRACE_WITH_TRAILING_SPACE Value('\s*}') 
        DclConst OPENING_BRACE                     Value('{')
        DclConst CLOSING_BRACE                     Value('}')

        Result = Regex.Replace(Query,OPENING_BRACE_WITH_TRAILING_SPACE, OPENING_BRACE)
        Result = Regex.Replace(Result,CLOSING_BRACE_WITH_TRAILING_SPACE, CLOSING_BRACE)

        LeaveSr Result 
    EndFunc 

    BegSr CreateQueryDefinition
        DclSrParm QueryMask Type(StringBuilder) 

        DclFld KeyField  Type(*String)
        DclFld KeyValue  Type(*String)
        DclFld i         Type(*Integer4)
        
        // Create query for OpenQueryFile.    
        Do FromVal(0) ToVal(*This.Args.Inputs.QueryParms.Count - 1) Index(i)
            KeyValue = String.Format("{0}", DataGateAPI.EscapeQueryFieldValue(*This.Args.Inputs.QueryParms[i].FieldValue.ToString())) 
            KeyField = String.Format("{{{0}}}",*This.Args.Inputs.QueryParms[i].FieldName.ToUpper())
            QueryMask.Replace(KeyField,KeyValue) 
        EndDo
    EndSr

    BegSr SetBeginningAndEndKeys
        DclSrParm dt Type(DataTable) 

        DclFld dr                Type(DataRow)         
        DclFld JsonStartingKeys  Type(*String) 
        DclFld JsonEndingKeys    Type(*String) 
        DclFld EncodedKeys       Type(*String) 

        If (dt.Rows.Count > 0) 
            dr = dt.Rows[0]         
            ForEach key Type(QueryField) Collection(*This.Args.Inputs.QueryParms)
                *This.Args.Outputs.StartingKeys.Add(*New QueryField(key.FieldName, dr[key.FieldName].ToString().Trim())) 
            EndFor            
            JsonStartingKeys = JsonConvert.SerializeObject(*This.Args.Outputs.StartingKeys)     
            EncodedKeys = DataGateAPI.Base64Encode(JsonStartingKeys)

            dr = dt.Rows[dt.Rows.Count-1] 
            ForEach key Type(QueryField) Collection(*This.Args.Inputs.QueryParms)
                *This.Args.Outputs.EndingKeys.Add(*New QueryField(key.FieldName, dr[key.FieldName].ToString().Trim())) 
            EndFor
            JsonEndingKeys = JsonConvert.SerializeObject(*This.Args.Outputs.EndingKeys)     
            EncodedKeys = DataGateAPI.Base64Encode(JsonEndingKeys)

            *This.Args.Outputs.MoreRowsForward = MoreRowsForward()
        EndIf 
    EndSr

    BegFunc MoreRowsForward Type(*Boolean)
        DclFld Key           Type(AdgKeyTable)
        DclFld EOF           Type(*Boolean)

        Key = DGDS.NewKeyTable(0)
        ForEach fk Type(QueryField) Collection(*This.Args.Outputs.EndingKeys) 
            Key.Row[fk.FieldName] = fk.FieldValue 
        EndFor 

        Try            
            DGFile.SeekKey(SeekMode.SetGT, Key) 
        Catch DgEx Type(dgException) 
            If (DgEx.Error = dgErrorNumber.dgEaEOF)
                EOF = *TRUE 
            ElseIf (DgEx.Error = dgErrorNumber.dgEaNOTFND)
                EOF = *TRUE
            Else
                Throw DgEx           
            EndIf
        EndTry    
        LeaveSr NOT EOF
    EndFunc         

    BegSr SetEncodedArgs
        DclFld Inputs  Type(*String) 
        DclFld Outputs Type(*String)

        If (String.IsNullOrEmpty(*This.Args.Inputs.Query)) 
            Inputs = JsonConvert.SerializeObject(*This.Args.Inputs)
            Outputs = JsonConvert.SerializeObject(*This.Args.Outputs)

            DclFld i Type(*Integer4)
            DclFld o Type(*Integer4)
            i = INputs.LEngth 
            o = Outputs.Length 

            i = DataGateAPI.Base64Encode(Inputs).Length
            o = DataGateAPI.Base64Encode(Outputs).Length  


            *This.Args.Outputs.EncodedArgs = DataGateAPI.Base64Encode(Inputs) + "~" ++ 
                                             DataGateAPI.Base64Encode(Outputs) 
        Else 
            *This.Args.Outputs.EncodedArgs = *Nothing
        EndIf
    EndSr

    BegFunc NextPage Type(*Object) Access(*Public)
        DclSrParm EncodedArgs   Type(*String) 

        DclFld Base64InputArgs  Type(*String) 
        DclFld Base64OutputArgs Type(*String)
        DclFld InputArgsJson    Type(*String) 
        DclFld OutputArgsJson   Type(*String)
        DclFld Pos              Type(*Integer4)

        Pos = EncodedArgs.IndexOf("~")
        Base64InputArgs = EncodedArgs.Substring(0,Pos) 
        Base64OutputArgs = EncodedArgs.Substring(Pos + 1) 

        InputArgsJson = ASNA.Helpers.DataServices.DataGateAPI.Base64Decode(Base64InputArgs)
        OutputArgsJson = ASNA.Helpers.DataServices.DataGateAPI.Base64Decode(Base64OutputArgs)

        *This.Args.Inputs = JsonConvert.DeserializeObject(InputArgsJson, *TypeOf(ASNA.Helpers.DataServices.QueryFileInstanceArgs.InputArgs)) *As ASNA.Helpers.DataServices.QueryFileInstanceArgs.InputArgs
        *This.Args.Outputs = JsonConvert.DeserializeObject(OutputArgsJson, *TypeOf(ASNA.Helpers.DataServices.QueryFileInstanceArgs.OutputArgs)) *As ASNA.Helpers.DataServices.QueryFileInstanceArgs.OutputArgs

        *This.Args.Inputs.QueryParms.Clear()
        ForEach qf Type(QueryField) Collection(*This.Args.Outputs.EndingKeys)
            *This.Args.Inputs.QueryParms.Add(*New QueryField(qf.FieldName,qf.FieldValue)) 
        EndFor
        *This.Args.Inputs.Options.Clear()
        *This.Args.Outputs.EndingKeys.Clear()
        LeaveSr *This.Exec()
    EndFunc 

    BegFunc NextPage Type(*Object) Access(*Public)
        If String.IsNullOrEmpty(*This.Args.Outputs.EncodedArgs) 
            Throw *New System.ArgumentException("Persisted paging data not available... are you stateless?")
        EndIf
        LeaveSr *This.NextPage(*This.Args.Outputs.EncodedArgs) 
    EndFunc 

    BegSr ValidateInputs        
        If (String.IsNullOrEmpty(*This.Args.Inputs.Query)) AND (*This.Args.Inputs.OrderBy.Count > 0 )
            Throw *New System.ArgumentNullException("Paged queries cannot specify 'order by' columns.")
        EndIf
    EndSr

    BegFunc Exec Type(*Object) Access(*Public)
        DclFld timer Type(StopWatch) New()

        Try
            timer.Start()
            ValidateInputs()
            If (String.IsNullOrEmpty(*This.Args.Inputs.Query)) 
                *This.Args.Inputs.QueryType = ASNA.Helpers.DataServices.QueryType.Paged
            Else 
                *This.Args.Inputs.QueryType = ASNA.Helpers.DataServices.QueryType.Simple 
            EndIf
            *This.GetQueryRows(*This.Args.Inputs.Rows) 
//            SetBeginningAndEndKeys(DGDS.Tables[0])
            timer.Stop()
            *This.Args.Outputs.Milliseconds    = timer.ElapsedMilliseconds
            OutputAdapter.Render(DGDS.Tables[0])
            SetEncodedArgs()

        Catch DGExcept Type(dgException)
            *This.Args.Error.ErrorMessage = DGExcept.Message
            *This.Args.Error.ErrorNumber  = DGExcept.Error.ToString()
            *This.Args.Error.SystemError  = DGExcept.SystemError.ToString() 
            *This.Args.Error.StackTrace   = DGExcept.StackTrace
            *This.Args.Error.ErrorException = DGExcept 

        Catch Except Type(System.Exception) 
            *This.Args.Error.ErrorMessage = Except.Message
            *This.Args.Error.ErrorNumber  = "No error number"
            *This.Args.Error.SystemError  = "No system error"
            *This.Args.Error.ErrorException = Except
        EndTry 

        LeaveSr OutputAdapter.Result()
    EndFunc 

EndClass

